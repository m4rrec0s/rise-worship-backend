// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  firebaseUid String    @unique
  imageUrl    String?
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  permissions   UserGroup[]
  musics        Music[]
  createdGroups Group[]     @relation("GroupCreator")
  setlist       Setlist[]
}

model Group {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User        @relation("GroupCreator", fields: [createdBy], references: [id])
  permissions UserGroup[]
  musics      Music[]     @relation("GroupMusics")
  setlists    Setlist[]   @relation("GroupSetlists")
  categories  Category[]
}

model UserGroup {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  groupId    String   @db.ObjectId
  permission String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])
}

model Music {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId    String   @db.ObjectId
  title      String
  lyrics     String
  tone       String
  cipher     String?
  author     String
  links      Json
  thumbnail  String?
  categoryId String?  @db.ObjectId
  tags       String[]
  bpm        Int?
  createdBy  String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  group    Group          @relation("GroupMusics", fields: [groupId], references: [id])
  creator  User           @relation(fields: [createdBy], references: [id])
  category Category?      @relation(fields: [categoryId], references: [id])
  setlists SetlistMusic[]
}

model Setlist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String   @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  createdBy   String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group   Group          @relation("GroupSetlists", fields: [groupId], references: [id])
  creator User           @relation(fields: [createdBy], references: [id])
  musics  SetlistMusic[]
}

model SetlistMusic {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  setlistId String @db.ObjectId
  musicId   String @db.ObjectId
  order     Int

  setlist Setlist @relation(fields: [setlistId], references: [id])
  music   Music   @relation(fields: [musicId], references: [id])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId     String   @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  group  Group   @relation(fields: [groupId], references: [id])
  musics Music[]
}
